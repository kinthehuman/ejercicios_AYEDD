package ayedd.examenFinal;

import java.time.Instant;
import java.time.Duration;
import edu.princeton.cs.algs4.Out;

import java.util.Random;
import java.util.Arrays;

import java.util.Properties;

import static org.assertj.core.api.Assertions.*;

import java.io.File;

import static org.junit.Assert.assertTrue;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertArrayEquals;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.rules.Timeout;

import org.junit.contrib.java.lang.system.ExpectedSystemExit ;
import org.junit.Rule;


import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.any;
import static org.powermock.api.mockito.PowerMockito.*;



@RunWith(PowerMockRunner.class)
@PrepareForTest(fullyQualifiedNames = "ayedd.examenFinal.*")
public class TestVector {
    @Rule
    public Timeout globalTimeout = new Timeout(80000);

    
    @Test
    public void IO_Tests()
    {
	// No IO Tests but must write file
	System.out.println("\n");
    }

    public void doTestVector(String comment, int[] a, int[] b, int expected){
	Vector v1 = new Vector(a);
	Vector v2 = new Vector(b);

	assertEquals(comment, v1.scalarProduct(v2), expected);
    }
    
    @Test
    public void Test_happy1()
    {
	int a[] = {1, 2, 3};
	int b[] = {1, 1, 1};
	int expected = 6;

	String comment = Arrays.toString(a) + "  ⋅ " + Arrays.toString(b);

	doTestVector(comment, a, b, expected);
    }

    @Test
    public void Test_happy2()
    {
	int a[] = {0, 0, 0};
	int b[] = {1, 1, 1};
	int expected = 0;

	String comment = Arrays.toString(a) + "  ⋅ " + Arrays.toString(b);

	doTestVector(comment, a, b, expected);
    }

    @Test
    public void Test_happy3()
    {
	int a[] = {-1, -1, -1};
	int b[] = {1, 1, 1};
	int expected = -3;

	String comment = Arrays.toString(a) + "  ⋅ " + Arrays.toString(b);

	doTestVector(comment, a, b, expected);
    }


    @Test
    public void Test_happy4()
    {
	int a[] = {5};
	int b[] = {7};
	int expected = 35;

	String comment = Arrays.toString(a) + "  ⋅ " + Arrays.toString(b);

	doTestVector(comment, a, b, expected);
    }

    
    public void Test_nullVector()
    {
    	int a[] = {-1, -1, -1};
	int b[] = null;
	
	int expected = 0;
	
	String comment = Arrays.toString(a) + "  ⋅ " + Arrays.toString(b);

	doTestVector(comment, a, b, expected);	
    }

    public void Test_diff_length_vectors()
    {
    	int a[] = {-1, -1, -1};
    	int b[] = {5};

	int expected = 0;

	String comment = Arrays.toString(a) + "  ⋅ " + Arrays.toString(b);

	doTestVector(comment, a, b, expected);
    }
    
}

