package ayedd.examenAbril;

import java.util.Iterator;
import edu.princeton.cs.algs4.Queue;
    
import java.time.Instant;
import java.time.Duration;
import edu.princeton.cs.algs4.Out;

import java.util.Random;
import java.util.Arrays;

import java.util.Properties;

import static org.assertj.core.api.Assertions.*;

import java.io.File;

import static org.junit.Assert.assertTrue;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertArrayEquals;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.rules.Timeout;

import org.junit.contrib.java.lang.system.ExpectedSystemExit ;
import org.junit.Rule;


import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.any;
import static org.powermock.api.mockito.PowerMockito.*;



@RunWith(PowerMockRunner.class)
@PrepareForTest(fullyQualifiedNames = "ayedd.examenAbril.*")
public class TestExamen {

    @Test
    public void IO_Tests()
    {
	// No IO Tests but must write file
	System.out.println("\n");
    }
    
    @Test
    public void Test_3_LessThan_4()
    {
	Int m = new Int(3);
	Int n = new Int(4);

	assertTrue(m.lessThan(n));
    }

    @Test
    public void Test_4_LessThan_3()
    {
	Int m = new Int(4);
	Int n = new Int(3);

	assertFalse(m.lessThan(n));
    }

    @Test
    public void Test_3_LessThan_3()
    {
	Int m = new Int(3);
	Int n = new Int(3);

	assertFalse(m.lessThan(n));
    }

    @Test
    public void Test_3_LessThan_minus_4()
    {
	Int m = new Int(3);
	Int n = new Int(-4);

	assertFalse(m.lessThan(n));
    }

    @Test
    public void Test_minus_4_LessThan_3()
    {
	Int m = new Int(-4);
	Int n = new Int(3);

	assertTrue(m.lessThan(n));
    }

    @Test
    public void Test_minus_3_LessThan_minus_3()
    {
	Int m = new Int(-3);
	Int n = new Int(-3);

	assertFalse(m.lessThan(n));
    }
    

    @Test
    public void Test_getQueue_5()
    {
	Int m = new Int(5);

	String expected = "0\n" + "1\n" + "2\n" + "3\n" + "4\n" + "5\n";

	String result = "";
	
	Iterator<Int> i = m.getQueue().iterator();

	while (i.hasNext())
	    result += i.next() + "\n";

	assertEquals(expected, result);
	    
    }


    @Test
    public void Test_getQueue_minus_5()
    {
	Int m = new Int(-5);

	String expected = "0\n" + "1\n" + "2\n" + "3\n" + "4\n" + "5\n";

	String result = "";
	
	Iterator<Int> i = m.getQueue().iterator();

	while (i.hasNext())
	    result += i.next() + "\n";

	assertEquals(expected, result);
    }

    
    @Test
    public void Test_getQueue_0()
    {
	Int m = new Int(0);

	String expected = "0\n";

	String result = "";
	
	Iterator<Int> i = m.getQueue().iterator();

	while (i.hasNext())
	    result += i.next() + "\n";

	assertEquals(expected, result);
    }

    
}

